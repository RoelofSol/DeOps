
change name to RiseOp
test


move profile, storage, trust, mail pending over to fileAssist
investigate flexible 'smart byte'
focus
allow all components to put a little 'lastest version' tag in location posts, hook into events, if focused then d/l
	link / profile

component
	**dont enforce default published empty files for storage, plan, mail boxes

	register with store control
		gets back handle to settings object
	publish(header, file)
		store control handles searching, replicating, 
		transfers, downloads, caching
	common way of managing quotas
		investigating total allocations on disk and in memory
		
	also look at removing unused event hooks?
	
	board, link, location, mail, plan, profile, storage
		try to make common storage only way to store shit on network, so safer for 3rd parties
	

board - All/Higher/Lower Posts, New Post
live command tree/chat

Testing
	more accurate replication - link/location/profile/mail
	check that data is cachced 8 closest to ID, record cached link files in sim interface
	links timing out when traversing strucuture
	maxes / focus purging for all components - links/locs/profiles/mail
	link.getlocs / getlocsbelow
	link/plan research timer
	38 crits


spring release
	crits
	multisource downloading - use torrent
	store caching
	proxying
	invitations
	website, auto-update
	licensing, installer
	compartmentalization
	modifyable encryption
	mobile - proxy mode can be set and tested in normal version
	mono
	open source compensation model using credits


Interface
	General
		Sorting of listviews
		status panel needs to update as network connects network_statusupdate, trigger news as well
		test gmt visible in status panel
		unload tray icon on exit?
		alphabetizize component menus
		dont allow nav bar person switch on mail/chat components

	Internal 
		expand a little more (names associated with sessions/transfers/searches/publish)
		browsing using nav bar needs to trigger searches and let link control know of whats focused
		create function to search through externals for type/id/project, when popping external look for existing window?

	Link
		Online - Show as currently online nodes structured into makeshift hierarchy
			chat/voice uses this hierarchy for high/low - done so that realtime communication is not fragmented when people go offline
		
	News
		crazy refreshes when news not visible and button clicked
		show connected / disconnected
		chat msg (if chat not visible or visited in last minute, or alerted in last minute)
			<project> Chat activityk, Betty: hey group....
		new people online 
		
		more refined, if care about user, do detailed diff between new and old file
			show self only if local didn't make the change, if non-local self change show as white
			detect diff between changed schedule / changed goals or both

	graphics
		storage - restore
		mail	- forward, reply
		board   - high, low, all
		plans   - edit
		goals	- edit
		tray	- restore, exit
		chat	- 
	
Components
	General
		Refactor Components with delegates or something, refactor while building visual component
			invokeInterface control->gui, gui->interface control functions handle locking of objects (NO locking from gui code)
		break control into interface comm / control comm so that multiple guis (mobile/mono/wpf) can be implemented easily
		Many actions in gui isnt piped down into control to fire events back to the interface to signal updates for multiple interface instances
		component plug-ins / view plugins for private components
		Remove references to LinkMap, use GetLink
		when component handles exit, assert that all events are emptied of references to debug gui's not releasing event handles
		
	***handle link get focused safely
		check if its in storage as well
		handle get focused in IM as well
		plans
		board
		chat
		profile?
		ensure name resoluton works, chat/IM updated when link loaded
		
	Trust
		Higher determines lower's title/Name upon trust?
		Show that name/title so that can't be forged by someone changing their name and re-linking
		
		components
			links   - getlocs .. check cache functions
			chat    - high level chat is others in loop,
		New function to 'find in link map' so that mail,board,chat can provide the user with an option to 'find' a user

	Location 
		global replication
		make persistant so status panel can display last seen, also loaded can go straight to the cache
		permanent locations, no ttl except for global
		might be problem with different client ids
		can probably get rid of thread locks on location map
		send direct connects location updates immediately so they get things like away messages
		
		
		location info should probably contain latest versions for all components so 
			for example two of the same account would sync their storage without having to specifically having to open storage
			dynamic works for all components in list
	
	IM 
		Saved/Loaded my main IM interface
		Internal interface
		Log Interface - in chat log
		If link is unknown, then name is unkown, make sure to search for name and update interface
			reflect name changes in IM window / rest of interface
		Crash on close IM, fin being called? unhooking from IMcontrol events? 
		
	Chat 
		show unfocused label as red on new messages
		only send full status on connect, otherwise send mini status updates for join/leaves
		figure out why invites don't work a lot, ensure that on connect invites are sent
		host going offline and coming back causes room members to not be synchronized
		double click member - IM, right click  - views, single click - send status, who
		room option - show locations, also for IM, make location font smaller
		check size of signed invite field
		handle get link/location/profile focus calls
		link name change should change name in chat logs as well for chat/IM/window title
		implement live rooms / network
		set default cursor in input box
		test that our own link changes are reflected in link changes
		if room custom and no members, kill
		
		in future nodes marked as server can have rooms registered there so only one node to query for full room list
		log does chat/im - setup like yahoo chat log
		on join chat, node asks other nodes for previous singed messages before specified time
		
	Mail 
	    debug send/recv mail
		tagging messages, filter by tags
		double clicking on name loacates them in link tree in panel
		use labels for organization - for example a project label could be tagged on, so we could filter regarding project x
		delete mail not refreshing view
		soon - sync local mail between users
		test/do re-publishing mail

	Board 
		 board scope sub-levels down, auto search highers for posts that have source==target, and show if in scope
		 attaching files
		 ***posts/replies not updating quickly or at all :(
		 *** use high/low check buttons, not a drop down
		 
	Profile
		time out loading - better searching interface use smoke color and better font, more info searching/dling/etc..
		Search / Transfer process painfully slow in real time mode, analyze

	Plans
		old plans not being deleted? seems like extra files in dir, try loading solo and updating local plan file
		shutdown in the middle of the causing load corruption?			
		transfer branch path when goal <-> schedule
		***probably want a custom renderer for the progress bar, default xp has it green
		***schedule slider should respond to mouse scrolls
		
	Storage
		drag into secure storage gives user option to replace what is already there, either on disk or locked
		
		review file references system
		drag files folder over highlights target
		secure copy / paste can use same folder commands as drag/drop

		$ save storage snapshots (past header file versions) - display at root node	
		$ signal on comparison page if all files are replicated on network (can go offline and files still exist)
		
	Search
		index components in local area of dht network
		search - sends query to that area of network target is in	

Core
    old projects not cleared from components during savelocal, save / ditch / option?
    multisource downloading
    each component's minute action should have unique interrupt given by core class
     
	Rudp
		location updates
		route data over session if desination the same	
		nat/block keep list of recent search ids/kadids so duplicate results arent sent out
		check natted are finding closest nodes to proxy off of
		use rudp when available to transmit link / loc data
		with rudp now being used, should analyze purely global network


	Search 
		give components priority?? link over location, etc..
		make sure search result locations get to file download
		make sure store locations get to file download direct search -> store response works through firewalls
		both have the ability to be proxied

		record source kaddi with value
		on download try source, id isnt in location list, search for it, need that ID key to connect

		by the time key gets checked for download, profile / link headers should have right key if source is the same, if not gotta search

		search/download priority high (view) normal (network) low (research)
		forward searches to proxies
		if blocked send acks tcp to be forwarded
		analyze contact info sent in acks
		ensure correct contact info gets to transfer control, if blocked/natted/open ensure all work
		make sure download isnt started without sources

		search results need to transfer location info over to downloader
		what does search result from firewalled host look like?
		search results seem to only go out udp
		
		location info should include array of latest versions of each component
			so local area can update for everyone on login to the network
			storage, plans, profile - need latest fetched data of local area
			location data needs to be stored when user is offline for this to work

	connecting
		secret
			prevent connection to global network
			there needs to be stable points for invite to talk to
			outstanding invites are accepted incoming encryption keys
			   removing invite, removes key
			similar to private, but contact address points directly to sender
			file also passworded

		private 
		   Invite file contains sender's address on the global network
			Sender stores contact info at an invite ID address on the global network
			Opening invite file connects to global network, and finds invite ID info if it exists
				unencrypts to get senders location info, OpID, OpID only exposed if invite still published
			Sender contacted by invitee, people can IM, sender can choose to authorize invite
			Authorization sends OpID to new user
			file passworded as well

		public
			opID is embedded in link riseop://network:opid


	store caching 
		used when high load
		how to keep cache entries up to date?
		cache entries only last for like 5 mins
		requester do theh caching, or should requested auto-cache if load too high
			auto-caching might not hit the nodes that requesting nodes would be likely to hit
		index file hashes on network for files over 10 meg, otherwise file can be multisourced from default replicators of file
		always get content once found from node closest to SELF, pull content away from source, ensure it doesn't get flooded
			node publishes data (he is focal point), diseminates to adjacent peers (focal point splits in two, etc..)
	

	udp packet throttle especially for patches
		backlog for packets, for patches, etc.. not for rudp
		packet cache for more than 4k sent in second
		cache should go for 60 seconds make, 240k, bleed cache out, first in first out
		Alert if packet cache has any entries at all
		check in sim if node sending more than x packets per sec
		
	ensure small nets / starting nets can be proxied through global net
		tcp proxies for non-local ops should be bandwidth throttled
		connect status should specify proxied through global
		5 connections in same op but all blocked able to form active op network by proxying throgh global
		
	privacy from untrusted
		mail grey if from untrusted source
		no posts allowed from untrusted
		IM settings allow host to not allow messages from untrusted
		refuse replication of network pieces to blacklisted, inherit blacklist from higher
			dont not replicate to untrusted because then each id needs to be trust verified continually
		heartbeat from top down with unique key, wont talk to 'unknown' nodes in dht without it
		if user is ignored, chat invites are ignored as well
		storage quotas per id to prevent flooding
		
Simulator
	track bandwidth / memory / allocated objects
	figure out why IO writes in FiresoftDemo so high, getting 2min/sec through, pretty damn good
	record max udp burst sizes, or do packet size distribution histogram

	***test lockreading inside writing and visa versa
	***checksigned / idtokey throw exceptions, maybe just return false or something?
	
			
quick
	test with null global, even have option for secret at this point?
	ensure callers know what to do when tcpcontrol.sendpacket is overloaded
	bandwidth chart
	subclass collections, create auto locked collections
	use localfilekey for all file names so name diff per computer
	finish self search and then start bucket replication so startup doesnt spit out massive patches
	component dir also encoded with local key / trimmed to 8 chars
	cache files missing from component header - do in load header
			dont delete old path in Cache<component> function, until new header saved: move - save headers - delete old files
	run save headers every 10 secs - every sec is too often, and slows simmy
			
			
Future
	Nodes that say they proxy for node x have signed auth from x
	Ping includes auth test for id
    variable internal / private key schemes and sizes, ECC
    linear contact merging / split system?
    customizable logo/icons/password reqs (length, numerics, case)
    good leadership/management guide
    web based problem simulation, people assigned roles, sim starts, try to solve, katrina sim ;)
    database to storage system (for use with bug trackers, inventories, etc..)
    detect when computer changes then prompt user for location string update
    project/op name and other settings should be taken from whoever is the root node of self, info in projectdata
    quota storage space per node, interface to show, per component storage req as well as over all memory auditing interface
    voice chat in rooms / IM using skype API - can get to land lines
    load goal/board/mail archives serperately to speed load / reduce memory usage
    put all strings in resource file, mass convert using google translate, let user on run choose flag/language from upper left corner
		autodetect lang on OS as well
	purchase through website, allows user to sign in, take their any of their project files, have it signed as registered, and returned to them
		online signature could also include keys to unlock purchased components
		registered version ONLY on usb key
		master riseOp public key put on hardware key, never known, used to authenticate licensed components
		anyone can go to website, and if they have an account secure their third party component so that only people with pro
			version can use it
		orgs could upgrade to fully secured, replace their free versions with secured ones, == big business for us
		orgs would want unqiue physical keys per person, people *could* have multiple orgs on the same key, or use multiple keys
		loosing keys also means $$ for us, piggy back off hardware sales, like apple lolz
		
	de-ops urls boards storages chats anything, extendable
		peoples emails, profiles, etc.. can include <links>

    security
		able to change Op ID in client - for project forks or if project is majorly compramised
			new Op ID can be secure mailed to entire org, or pointer can be put in link file (went to op id x)
			
		signed invitation files - so that if bad people get in, we know who signed them in
	
		periodic heart beat with secuity key sent from to all trusted nodes, key transmitted during all ops
			keeps untrusted from being sent any storage information, if kicked out of trusted tree		
		
	web based node
		server like caching if enabled
		web node is owned by an individual, like any other node	
		web interface, at first just caching support
		
	huge part of project is allowing companies to sell licensense (applications) throughout network
		subs auto inherit purchased apps, never be anywhere without apps, look at encryption techniques to make this work

	components
		auto component distribution to lowers if they dont have it
		
		visual 
			user can inherit or create new canvases
			default background is transparent so overlays easy
			zoom in/out infinite, images created on 'planes' z-axis coordinate
				zooming out if other regions in view, their sub-regions are found
				affiliate zoom with levels down so that people know on what level to draw
			node inherits higher's images which overlay lower's drawings
				ie higher can create bounds that lower fills in
			node can define regions for lowers to draw in
				lowers by default see this region when they open visuals not the whole canvas
			interface - basic paint operations with copy/paste, show transparent zones (off by default)
			layers for putting down map img/ people img and being able to edit it easily
			3d component uses imported models from any souce, sketch up ? 
			lower corner box shows zoomed out view
			samples - geographical area, flow chart, blueprints
		
		database 
			holder of database can create dashboards, custom views into data for highers ups to understand
			lowers to aggregate data, example - call center statistics, support database with issues
			nodes post sql commands to database, sort of like mail, send, receive, ack, once processed into db
			db entries peer reviewed at host (holder of db), db's can be replicated and hosted somewhere else, exported, imported
			sql express backend? should work on phones as well
		
		audio 
			headphones/speakers, left side is lowers, right side is higher/adjacents	
				on mono prefix high/low beep before audio clip to signal what level talker is from
				save last x voice messages received for playback
			push to talk attached to each ear (or on pda), for talking to higher/lower side
			fastest human to human comunication possilbe, questions go as far up and then down as they need to go instantaneously
			if people are off line, or voice is off, voice network auto-configurse to fill in missing links
				higher node turns into who up the tree is online
				helps people who don't know each other get to know each other
					leads to eventual re-organization as those never on  are re-arranged into lower positions
				everyone on the network is connected through high/low to someone else by voice
				also used for chat
				another reason is that it presueds people to make well structured orgs, not base  a structure
					on what would have people around to talk to (lots of downlinks)
					with this setup for voice/chat there is always a group in range for real-time comm
			
		stats 
			how many people in org, follow link tree
			% active in last x, crawl persistant locs
			balance of tree at diff levels, also could do graphical reresentation
				like sequoia view showing where most people are and who follows them
			security, show all ips and resolve their hosts

		portal 
			links 2 organizatinos between a single point of trust
			portal manaages information flow
			how would something like a credit card work?
				i trust credit company
				business trusts credit company
				portal process credit transaction?
			seperate global network for portal communication, so a orgs OpID isnt exposed
				Ops have portalID that can change, and is published on portal network
				Sending mail for example would be bob <userID@portalID>
					enc with portal ID, and signed with bob's user ID
					published on portal network until picked up by bob's operation network
		
		commendations
			people want to be acknowledged/rewarded for progress
			commendation is a signed/and issued by someone to someone else for anything
				dated, details, image
			good canidate for an opensource plugin
				
		devices
			access to facilities on local device
				camera, certain applications, controls of sorts, etc...
			access can be granted to certain people / levels
			if mobile user had a camera phone then highers could see what the user sees - live reporting
			pipes - user could temporarily grant access to others devices
				ex. higher views camera of lower, and gives access to all his lowers so everyone can see
		
		security
			keeps dns resolved list of online contacts
			can crawl network, list all dns

		credits / Resources
			user decides to be the 'banker' publishes x # of signed credits say 1,000,000
			users can trade credits arbitrarily, credits signed over and re-signed as passes through system
				prevents forge, on forge instant conflict, to diagnose, go to the fork in the road
			if new 'banker' comes in he can re-initialize the credits with his own signature, starting a new round
			advantages - keeper of currency in system is trusted independently
				issuers of currency can change over time
				inflation proof? currency can not be created (pirated), and it is, instant inflation, credits should never lose value
				everyone always knows what a credit is worth, auto-adjusts, no fear of inflation
			initial collection of credits can be held by the banker or given all to the top leader, whatever, options open for custom systems
			larger systems could benefit from using credits to motivate subs
			
			idea for going open source ? 
				start personally with 500,000 credits thinking this year im going to make $500,000.
				Give them out during the year to people who contribute with them knowing each credit if worth $1 if the product makes $500,000
				personally motivated to not give out so much to leave me with less than $60,000
				
			meshes well with trust tree, if me the issuer of 500,000 doesnt do a good job (hoarding money to myself)
				people replace my credit system with someother bankers, who will fairly cash in the old credits
				
			closed source (invite only) though invites don't need to be protected that highly, just want to prevent quick rip-off jobs
				and end of year credits are cashed in and payouts made
				
			in this system (everyone) would be motivated optimally to create the greatest growth
			
			great thing is if $$$ isnt given out fairly new banker can be created
			**demo banking system
				banker chosen to be one experience, has own banking project
				subs in banker project are allocated funds to distribute on inititalization
				because credits have to be signed to pass on, its easy to find conflict and who the duplicator was 
				
			if SA used this system who knows what credits would do to it, how it would motivate people to create!!!
			
			charities operation differntly
				the total credit pool could represent total put into system by donors
				#of credits subs have represent how much they would be compenstated at the end of the cycle
				say system setup where 1 credit = 1$
				
			interseting artifact
				companies generate value to up the credit/$ ratio as more business is done over the period
				charties people work their hardest to be more investment to give their credits more value

			in gicantic 6 billion person de-ops
				command is the trust structure
				the projects/companies/charities work to distribute the $$$
				our complex society system completely simplified
			
			unit generic as representing resources
				i can create 6 cows and be my own banker for them, give them out
				give them their own unit type, same with land
				exchanges can be made between units with third parties (trusted higher)
				
				

		time
			uses samples of UTC time from nodes on network to determine mean time, with certian confidence
			alerts user if local time looks like its an outlier from the network
			posts, changes, etc.. uses this time to tag packets instead of computers own time
			trial versions, invite expirations, etc.. can also use network time as opposed to system time


	Compartmentalization
		sign with level key, mark with level version of key signed
		when link version updated
			if subordinates removed
				create new level key
				level version set to current link file version
			encrypt and sign level key with each of the sub ordinates key
		compartmentalized data is encrypted with level key
		only sub-ordinates at the time of specific objects compartmentalization have access to level
		board - post contains reply key to simplify many needed level keys
		level key for high / low
		
		branch compart
			branch key encoded with level key
			lower links encode higher branch keys with their level key to lowers
			branch version same as level?
			
		'set permissions dialog' that all components can implement, user can click 'permissions..' button to set
	
	licensing
		deops looks for signed license file for proof
		passes license file to others on network as proof that local node is licensed
		license itself is signed data like name, address, phone, date, customer ID, signed by swax
		if people using bad license they'll know it because their name isnt in it
		bad license can be copied, shared with warez whatever, the point is license accountability and proving bad licenses, creating incentive to get 'own' license	
		how to people protect their own licenses from being copied unwillfully?
	
Release security
    throwing load exception in obfuscated code?
	Ensure unnessesary strings arent exposed
	Online tracking, embedd JMG internal key
	Obfuscate
	Sign
	detatch simulator
	Install app into GAC, strong name
	Pre-compile with ngen, http://msdn.microsoft.com/vcsharp/default.aspx?pull=/msdnmag/issues/06/05/CLRInsideOut/default.aspx
	send out random garbage and random times to random hosts, sometimes with char stings like 'hola como estas' just to mess
	    sniffers up a lil more 


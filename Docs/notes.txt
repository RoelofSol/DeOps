
debugging
	finding an error
		start removing code
	chaning an implementation / structure
		re-name old strucutures to *old
		create mirror stuctures
		start moving old implementation over to the new 
	
	Length of the data to decrypt is invalid.
		Happens when FileStream is used to read TaggedStream data
	
performance	
	128 clients, 10 sim minutes, no services loaded, fresh start, avg memory, logging off
		debug < 400mb, 80mb after GC
		max 500kb bandwidth, < 1kb/s
		with chat, each connection 150kb overhead so 128 * 16 max per untrusted room * 150kb = 300mb!
	
Threading
	Op objects are recreated when loaded so that interface with current handle doesnt get collections modified inbetween
		dont need to lock inside op stucture if only interface accesses it
		when someone is editing/wring a new opPlan and a new plan gets loaded there wont be a conflict

single instance
	scenario user part of multiple public networks, or surfing public networks quickly
	global network remains established across all, only one global net
	prevent global net connection for each instance of riseOp
	will all loaded cores managed by single instance, bandwidth can be managed more efficiently

security
	level 1 - operation key
	level 2 - secure routing (only routing to trust linked nodes)
	level 3 - compartmentalization
	level 4 - p2p comm links
	
LAN
	lan mode on default on startup
	
	if lan mode on
		broadcast ping in lan mode every 20 secs (disconnect / reconnect find each other quickly)
		ping telling us our IP is external sets lan mode false
			set firewall to blocked - dont need to disconnect
		
	if lan mode off
		receiving tcp connects or pings from LAN ips, has no effect on firewall
		on disconnect from operation
			reset IP
			set LAN mode on
			broadcast ping
			set firewall blocked - dont need to disconnect tcp, already disconnected

	receive ping
		if local ip
			if lan mode store
			if not lan mode ignore
		if external ip
			if lan mode - set lan mode off, set blocked, purge routing, store localIP as LanIP
			if not lan mode - store in routing, set firewall
			
	set broadcast port to first 2 bytes of opkey's hash

web cache
	startup
		web caches loaded from settings / links
		set next publish is set to 1 hour

	bootstrap
		for each web cache
			if time > next query
				try query
				increment query retry
				
				if success
					add nodes
					if low
						publishTo(cache) using remote ip
						continue
					else
						break
				else
					if think online set last tried to now
					continue	
		
	timer
		if time > next publish
			if connected and firewall open
				foreach web cache
					if time > cache timeout
						try publishTo(cache)
						if success
							if low continue
							else break
						else
							if think online set last tried to now
							continue
					
		prune
			remove largest difference between last seen and last tried
            this way caches that were never seen are always removed first while ensuring they've been tried
            remove any diff more than 7 days

	disconnect
		reset web cache query retry and next publish
		
	save to settings
		randomize
	
	add cache / on connect
		if last tried not set and think online, ping cache
	
	send caches in link
		get top 3 last seen caches (because loaded is random, publish is random)

	give op caches out in invite for secret / private
	
	
chat
	pure p2p everyone connected to everyone else, rudp should have low overhead 100bytes/min max, 100 users would be 1,000/6 bps